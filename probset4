#!/usr/bin/env/python
# NE334 ProblemSet4 Question 1 
#Gurparteek Dhream
#Part a

import matplotlib.pyplot as plt
import re 
'''
filedata = open('ar.log','r').read()
Time=re.findall(r"Time:\s(\d+\.\d+)", filedata)
Potential= re.findall(r"Potential\senergy:\s(\D?\d+\.\d+)", filedata)
Kinetic= re.findall(r"Kinetic\senergy:\s(\D?\d+\.\d+)", filedata)
Total_Energy=[0]*len(Time)
for i in range(len(Time)):
	Time[i] = float(Time[i])
	Potential[i]= float(Potential[i])
	Kinetic[i]= float(Kinetic[i])
	Total_Energy[i] = Potential[i]+Kinetic[i]

plt.plot(Time,Kinetic, label = 'Kinetic Energy',color='g')
plt.plot(Time,Potential, label = 'Potential Energy', color='b')
plt.plot(Time,Total_Energy, label ='Total Energy', color='r')
plt.ylabel('Energy (KJ)')
plt.xlabel('Time (s)')
plt.legend(bbox_to_anchor=(1,0.70))
plt.show()
'''

# Part b
'''
filedata= open('change_time','r').read()
Time=re.findall(r"TS=(\d+)",filedata)
Kinetic=re.findall(r"[^/]<K>\s+=\s+(\D?\d+\.\d+)",filedata)
Potential=re.findall(r"[^/]<V>\s+=\s+(\D?\d+\.\d+)",filedata)
Total_Energy=re.findall(r"[^/]<E>\s+=\s+(\D?\d+\.\d+)",filedata)
for i in range(len(Time)):
	Time[i] = float(Time[i])
	Potential[i]= float(Potential[i])
	Kinetic[i]= float(Kinetic[i])
	Total_Energy[i] = float(Total_Energy[i])

plt.plot(Time,Kinetic, label = 'Kinetic Energy',color='g')
plt.plot(Time,Potential, label = 'Potential Energy', color='b')
plt.plot(Time,Total_Energy, label ='Total Energy', color='r')
plt.ylabel('Energy (KJ)')
plt.xlabel('Time (s)')
plt.legend(bbox_to_anchor=(1,0.90))
plt.show()
'''
'''
# Part c

filedata= open('change_time2','r').read()
Temp=re.findall(r"T=(\d+)",filedata)
Kinetic=re.findall(r"[^/]<K>\s+=\s+(\D?\d+\.\d+)",filedata)
Potential=re.findall(r"[^/]<V>\s+=\s+(\D?\d+\.\d+)",filedata)
Total_Energy=re.findall(r"[^/]<E>\s+=\s+(\D?\d+\.\d+)",filedata)
Fluc_K=re.findall(r"/<K>\s+=\s+(\D?\d+\.\d+)",filedata)
Fluc_P=re.findall(r"/<V>\s+=\s+(\D?\d+\.\d+)",filedata)
Fluc_E=re.findall(r"/<E>\s+=\s+(\D?\d+\.\d+)",filedata)
for i in range(len(Temp)): 
	Temp[i] = float(Temp[i])
	Potential[i]= float(Potential[i])
	Kinetic[i]= float(Kinetic[i])
	Total_Energy[i] = float(Total_Energy[i])
	Fluc_K[i]=float(Fluc_K[i])
	Fluc_P[i]=float(Fluc_P[i])
	Fluc_E[i]=float(Fluc_E[i])

fig, ax1 =plt.subplots()
ax1.plot(Temp,Kinetic, label = ' Avg. Kinetic Energy',color='r')
plt.legend(bbox_to_anchor=(0.5,1.0))
ax1.set_xlabel('Temperature (K)')
ax1.set_ylabel(' Avg. Kinetic Energy (KJ)')
ax2=ax1.twinx()
ax2.plot(Temp,Fluc_K, label ='Fluc_K', color='m')
ax2.set_ylabel(' Fluc_K(KJ)')
plt.legend(bbox_to_anchor=(1.0,1.0))
plt.show()


fig,ax1=plt.subplots()
ax1.plot(Temp,Potential, label = 'Avg. Potential Energy', color='b')
plt.legend(bbox_to_anchor=(0.5,1.0))
ax1.set_xlabel('Temperature (K)')
ax1.set_ylabel('Avg. Potential Energy (KJ)')
ax2=ax1.twinx()
plt.plot(Temp,Fluc_P, label ='Fluc_P', color='y')
ax2.set_ylabel('Fluc_P(KJ)')
plt.legend(bbox_to_anchor=(1.0,1.0))
plt.show()

fig,ax1=plt.subplots()
plt.plot(Temp,Total_Energy, label ='Avg. Total Energy', color='y')
plt.legend(bbox_to_anchor=(0.5,1.0))
ax1.set_xlabel('Temperature (K)')
ax1.set_ylabel(' Avg. Total Energy(KJ)')
ax2=ax1.twinx()
ax2.plot(Temp,Fluc_E, label ='Fluc_E', color='k')
ax2.set_ylabel(' Fluc_E (KJ)')
plt.legend(bbox_to_anchor=(1.0,1.0))
plt.show()

'''
# NE334 ProblemSet4 Question 2

#Part a,b
'''
filedata = open('ar.log','r').read()
Time=re.findall(r"Time:\s(\d+\.\d+)", filedata)
Potential= re.findall(r"Potential\senergy:\s(\D?\d+\.\d+)", filedata)
Kinetic= re.findall(r"Kinetic\senergy:\s(\D?\d+\.\d+)", filedata)
Total_Energy=[0]*len(Time)
for i in range(len(Time)):
	Time[i] = float(Time[i])
	Potential[i]= float(Potential[i])
	Kinetic[i]= float(Kinetic[i])
	Total_Energy[i] = Potential[i]+Kinetic[i]
	if Time[i]<=1:
		short_time= i 

# for long Time
plt.plot(Time,Kinetic, label = 'Kinetic Energy',color='g')
plt.plot(Time,Potential, label = 'Potential Energy', color='b')
plt.plot(Time,Total_Energy, label ='Total Energy', color='r')
plt.ylabel('Energy (J)')
plt.xlabel('Time (s)')
plt.legend(bbox_to_anchor=(1,0.70))
plt.show()

# for Short Time
plt.plot(Time[:short_time],Kinetic[:short_time], label = 'Kinetic Energy',color='g')
plt.plot(Time[:short_time],Potential[:short_time], label = 'Potential Energy', color='b')
plt.plot(Time[:short_time],Total_Energy[:short_time], label ='Total Energy', color='r')
plt.ylabel('Energy (KJ)')
plt.xlabel('Time (s)')
plt.legend(bbox_to_anchor=(1,0.70))
plt.show()
'''
#Part c

# NE334 ProblemSet4 Question 3
# Part C
'''
filedata = open('E_Pro','r').read()
Total_Energy=re.findall(r"(\D?\d+\.\d+)", filedata)
filedata = open('V_Pro','r').read()
Potential=re.findall(r"(\D?\d+\.\d+)", filedata)
filedata = open('K_Pro','r').read()
Kinetic= re.findall(r"(\D?\d+\.\d+)", filedata)
dt = 0.0025 
Time=[0]*len(Potential)

for i in range(len(Potential)):
	Time[i]=dt*i + Time [i]

for i in range(len(Time)):
	Potential[i]= float(Potential[i])
	Kinetic[i]= float(Kinetic[i])
	Total_Energy[i] = float(Total_Energy[i])

plt.plot(Time,Kinetic, label = 'Kinetic Energy',color='g')
plt.plot(Time,Potential, label = 'Potential Energy', color='b')
plt.plot(Time,Total_Energy, label ='Total Energy', color='r')
plt.ylabel('Energy (KJ)')
plt.xlabel('Time (s)')
plt.legend(bbox_to_anchor=(1,.87))
plt.show()
'''


'''
#Part D

filedata = open('OHdistance','r').read()
OH=re.findall(r"([\d\.\-]+)\s+([\d\.\-]+)", filedata)
Odistance=[0]*len(OH)
Hdistance=[0]*len(OH)
print len(Odistance)
dt = 0.0025
Time=[0]*len(Odistance)
sum_O =0
sum_H = 0
for i  in range(len(OH)):
	Odistance[i]=float(OH[i][0])
	Hdistance[i]=float(OH[i][1])
	Time[i] = dt * i
	sum_O += Odistance[i]
	sum_H += Hdistance[i]
#norm
sum_O /= len(OH)
sum_H /= len(OH)
Avg_Hdistance=[sum_H]*len(Time)

plt.plot(Time,Hdistance, label = 'Distance', color='b')
plt.plot(Time,Avg_Hdistance,label='Avg_Hdistance',color='r')
plt.ylabel('Distance (nm)')
plt.xlabel('Time (s)')
plt.legend(bbox_to_anchor=(1,1))
plt.xlim([0.0,2.5])
plt.ylim([0.094,0.102])
plt.show()


filedata = open('HHdistance','r').read()
OH=re.findall(r"([\d\.\-]+)\s+([\d\.\-]+)", filedata)
Odistance=[0]*len(OH)
Hdistance=[0]*len(OH)

dt = 0.0025
Time=[0]*len(Odistance)

sum_O =0
sum_H = 0
for i  in range(len(OH)):
	Odistance[i]=float(OH[i][0])
	Hdistance[i]=float(OH[i][1])
	Time[i] = dt * i
	sum_O += Odistance[i]
	sum_H += Hdistance[i]
#norm
sum_O /= len(OH)
sum_H /= len(OH)
Avg_Hdistance=[sum_H]*len(Time)
plt.plot(Time,Hdistance, label = 'Distance', color='b')
plt.plot(Time,Avg_Hdistance,label='Avg_Hdistance',color='r')
plt.ylabel('Distance (nm)')
plt.xlabel('Time (s)')
plt.legend(bbox_to_anchor=(1,1))
plt.show()
'''